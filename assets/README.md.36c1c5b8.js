import{_ as n,c as s,o as a,a as t}from"./app.e0d4017e.js";const k='{"title":"@hpcc-js/web-components","description":"","frontmatter":{},"headers":[{"level":2,"title":"Installation","slug":"installation"},{"level":3,"title":"From NPM","slug":"from-npm"},{"level":3,"title":"From CDN","slug":"from-cdn"},{"level":2,"title":"Development","slug":"development"}],"relativePath":"README.md"}',e={},o=t(`<h1 id="hpcc-js-web-components" tabindex="-1">@hpcc-js/web-components <a class="header-anchor" href="#hpcc-js-web-components" aria-hidden="true">#</a></h1><p><img src="https://img.shields.io/github/license/hpcc-systems/hpcc-js-wc" alt="GitHub"></p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>This is currently a POC repository and has not been released to the npmjs repository.</p></div><p><code>@hpcc-js/web-components</code> is a library of Web Components that focuses on visualizations. It also includes communication libraries for interacting with <a href="https://github.com/hpcc-systems/HPCC-Platform" target="_blank" rel="noopener noreferrer">HPCC Platforms</a>.</p><h2 id="installation" tabindex="-1">Installation <a class="header-anchor" href="#installation" aria-hidden="true">#</a></h2><h3 id="from-npm" tabindex="-1">From NPM <a class="header-anchor" href="#from-npm" aria-hidden="true">#</a></h3><p>To install the <code>@hpcc-js/web-components</code> library, use either <code>npm</code> or <code>yarn</code> as follows:</p><div class="language-shell"><pre><code><span class="token function">npm</span> <span class="token function">install</span> --save @hpcc-js/web-components
</code></pre></div><div class="language-shell"><pre><code><span class="token function">yarn</span> <span class="token function">add</span> @hpcc-js/web-components
</code></pre></div><p>Within your JavaScript or TypeScript code, import the desired components (this is the recommended approach as it ensures that only the used components get included in your build - aka tree shaking):</p><div class="language-ts"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> HPCCSankeyElement<span class="token punctuation">,</span> HPCCZoomElement <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@hpcc-js/web-components&quot;</span><span class="token punctuation">;</span>

HPCCSankeyElement<span class="token punctuation">;</span> <span class="token comment">// Force bundler to include Sankey components</span>
HPCCZoomElement<span class="token punctuation">;</span> <span class="token comment">// Force bundler to include Zoom components</span>
</code></pre></div><p>Alternatively you can easily register all components:</p><div class="language-ts"><pre><code><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> all <span class="token keyword">from</span> <span class="token string">&quot;@hpcc-js/web-components&quot;</span><span class="token punctuation">;</span>

all<span class="token punctuation">;</span> <span class="token comment">// Force bundler to include all components</span>
</code></pre></div><h3 id="from-cdn" tabindex="-1">From CDN <a class="header-anchor" href="#from-cdn" aria-hidden="true">#</a></h3><p>A pre-bundled script that contains all APIs needed to use FAST Foundation is available on CDN. You can use this script by adding <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules" target="_blank" rel="noopener noreferrer"><code>type=&quot;module&quot;</code></a> to the script element and then importing from the CDN.</p><div class="language-html"><pre><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>module<span class="token punctuation">&quot;</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://cdn.jsdelivr.net/npm/@hpcc-js/web-components/dist/index.min.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- ... --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>The markup above always references the latest release. When deploying to production, you will want to ship with a specific version. Here&#39;s an example of the markup for that:</p><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>module<span class="token punctuation">&quot;</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://cdn.jsdelivr.net/npm/@hpcc-js/web-components@1.2.3/dist/index.min.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p>For simplicity, examples throughout the documentation will assume the library has been installed from NPM, but you can always replace the import location with the CDN URL.</p></div><h2 id="development" tabindex="-1">Development <a class="header-anchor" href="#development" aria-hidden="true">#</a></h2><p>To start the component development environment:</p><div class="language-"><pre><code>git clone https://github.com/hpcc-systems/hpcc-js-wc.git
cd hpcc-js-wc
npm install
npm run serve
</code></pre></div><p>In vscode pressing <code>ctrl+shift+b</code> will start the build and serve process. Pressing <code>F5</code> will start debugging in the browser.</p>`,23),p=[o];function c(l,i,r,u,d,m){return a(),s("div",null,p)}var g=n(e,[["render",c]]);export{k as __pageData,g as default};
